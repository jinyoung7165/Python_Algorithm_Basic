#N종류의 화폐. 화폐 개수 최소한 사용해서 M원이 되도록
#2,3원이 있을 때 15원을 만들기 위해서는 3원을 5번 이용하는게 가장 효울적
#a(i):금액 i를 만들 수 있는 최소한의 화폐 수
#k:각 화폐의 단위
#k를 확인하며 
#a(i-k)를 만드는 방법이 존재하는 경우: a(i)=min(a(i),a(i-k)+1)
#a(i-k)를 만드는 방법이 존재하지 않는 경우: a(i)=INF
#n=3,m=7이고 각 화폐의 단위가 2,3,5인 경우
#첫번째 화폐단위인 2 확인. 각 인덱스는 화폐로 만들고 싶은 총 금액
#[0,INF,1,INF,2,INF,3,INF]  4원을 만들기 위해 2원이 2개 필요...
#3원 확인
#[0,INF,1, 1, 2, 2, 2, 3] 7원을 만들기 위해 2원*2+3원*1개=3개
#5원 확인
#[0,INF,1 ,1, 2, 1, 2, 2] 7원 만들기 위해 5원*1+2원*1개=2개 필요
#화폐단위 수, 총 금액
n,m=map(int,input().split())
#n개의 화폐단위 정보 입력
arr=[]
for i in range(n):
    arr.append(int(input()))
d=[10001]*(m+1)
d[0]=0
for i in range(n): #각각의 화폐단위
    for j in range(arr[i],m+1):  #각각의 금액
        if(d[j-arr[i]]!=10001): #만들금액-현재 화폐단위만큼의 금액을 만드는 방법이 존재하면 거기에 나 하나면 더하면 된다.(i-k)원을 만드는 방법이 존재
            d[j]=min(d[j],d[j-arr[i]]+1)
if(d[m]==10001): #최종적으로 m원을 만드는 경우가 없는 경우
    print(-1)
else:
    print(d[m])