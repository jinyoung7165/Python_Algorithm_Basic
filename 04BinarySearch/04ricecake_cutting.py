#19,14,10,17인 떡->15높이의 절단기로 자르면 4,0,0,2높이로 떡이 잘려 손님은 6의 떡을 가져감
#손님이 요청한 총 길이가 m일 때 적어도 m만큼의 떡을 얻기 위해 절단기에 설정할 수 있는 높이의 최댓값
#절단기의 높이 커질수록 손님이 가져가는 떡 작아진다
#절단기의 높이는 0부터 10억까지의 정수 중 하나->큰 탐색범위를 보면 이진탐색을 떠올려라!!
#중간점의 값(절단기의 높이)는 시간이 지날수록 최적화된 값이 되기때문에 떡 길이의 합이 필요한 떡의 길이보다 크거나 같을때마다 중간점의 값을 기록
n,m=list(map(int,input().split(' ')))#떡의 개수, 요청한 떡의 길이 합
arr=list(map(int,input().split()))#각 떡의 개별 높이
start=0 #이진탐색 시작점
end=max(arr) #이진탐색 끝점
result=0
while(start<end):
    total=0#잘린 떡의 전체 양
    mid=(start+end)//2 #중간점은 절단기의 높이
    for x in arr:
        if x>mid:#떡의 길이가 절단기 높이보다 크면 잘린만큼 떡의 양이 된다
            total+=x-mid #잘랐을 때 떡의 양
    if total<m:#떡의 양이 부족한 경우 더 많이 자르기(왼쪽 부분 탐색)
        end=mid-1
    else: #떡의 양이 충분한 경우 덜 자르기(오른쪽 부분 탐색)
        result=mid #최대한 덜 잘랐을 때가 정답이므로, 여기에서 result기록
        start=mid+1
print(result)